version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  postgres:
    image: postgres:15
    container_name: newsbot-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-newsbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newsbot}
      POSTGRES_DB: ${POSTGRES_DB:-newsbot}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-newsbot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'

  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "7077:7077"

  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8082:8081"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8085:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMASCHEMAREGISTRY: http://schema-registry:8081

  spark-history-server:
    image: bitnami/spark:3.5.1
    container_name: spark-history-server
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=history-server
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_HISTORY_SERVER_UI_PORT=18080
    ports:
      - "18080:18080"
    volumes:
      - spark-history:/opt/bitnami/spark/history

  rss-ingest:
    build:
      context: .
      dockerfile: services/rss_ingest/Dockerfile
    container_name: rss-ingest
    depends_on:
      - kafka
      - postgres
    environment:
      NEWSBOT_ENV: PROD
      POSTGRES_HOST: newsbot-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-newsbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newsbot}
      POSTGRES_DB: ${POSTGRES_DB:-newsbot}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_POLL_INTERVAL: ${PRODUCER_POLL_INTERVAL:-300}
      PRODUCER_CATEGORIES: ${PRODUCER_CATEGORIES:-}
    restart: unless-stopped

  scraper-worker:
    build:
      context: .
      dockerfile: services/enrichment_worker/Dockerfile
    container_name: scraper-worker
    depends_on:
      - kafka
      - postgres
    environment:
      NEWSBOT_ENV: PROD
      POSTGRES_HOST: newsbot-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-newsbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newsbot}
      POSTGRES_DB: ${POSTGRES_DB:-newsbot}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      RSS_ITEMS_TOPIC: ${RSS_ITEMS_TOPIC:-rss.items}
      ARTICLES_CLEANED_TOPIC: ${ARTICLES_CLEANED_TOPIC:-articles.cleaned}
      ALERTS_TOPIC: ${ALERTS_TOPIC:-alerts.feed_failures}
      CONSUMER_MAX_MESSAGES: ${CONSUMER_MAX_MESSAGES:-}
    restart: unless-stopped

  qwen-server:
    build:
      context: .
      dockerfile: services/qwen_server/Dockerfile
    container_name: qwen-server
    depends_on:
      - postgres
    environment:
      QWEN_LOCAL_PATH: /models/qwen
      HF_TOKEN: ${HF_TOKEN:-}
    volumes:
      - ${QWEN_MODEL_PATH:?Set QWEN_MODEL_PATH to the local Qwen model snapshot}:/models/qwen:ro
    ports:
      - "${QWEN_SERVER_PORT:-8000}:8080"
    restart: unless-stopped
    gpus: "all"

volumes:
  spark-history:
  postgres_data: