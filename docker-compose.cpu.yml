version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - news-net

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks:
      - news-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
    networks:
      - news-net

  postgres:
    image: postgres:15
    container_name: newsbot-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: newsbot
      POSTGRES_PASSWORD: newsbot
      POSTGRES_DB: newsbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - news-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMASCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - news-net

  spark-master:
    image: deltaio/delta-docker
    container_name: spark-master
    command: ["/opt/spark/sbin/start-master.sh"]
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - news-net

  spark-worker:
    image: deltaio/delta-docker
    container_name: spark-worker
    depends_on:
      - spark-master
    command: ["/bin/bash", "-c", "/opt/spark/sbin/start-worker.sh spark://spark-master:7077"]
    networks:
      - news-net

  spark-history-server:
    image: apache/spark:3.4.1
    container_name: spark-history-server
    depends_on:
      - spark-master
    command: ["/opt/spark/sbin/start-history-server.sh"]
    environment:
      - SPARK_HISTORY_OPTS=-Dspark.history.ui.port=18080
    ports:
      - "18080:18080"
    volumes:
      - spark-history:/opt/spark/history
    networks:
      - news-net

  rss-ingest:
    image: news_project_rss-ingest
    container_name: rss-ingest
    depends_on:
      - kafka
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: newsbot
      POSTGRES_PASSWORD: newsbot
      POSTGRES_DB: newsbot
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: unless-stopped
    networks:
      - news-net
    volumes:
      - ./kafka:/app/kafka

  scraper-worker:
    image: news_project_scraper-worker
    container_name: scraper-worker
    depends_on:
      - kafka
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: newsbot
      POSTGRES_PASSWORD: newsbot
      POSTGRES_DB: newsbot
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      RSS_ITEMS_TOPIC: rss.items
      ARTICLES_CLEANED_TOPIC: articles.cleaned
      ALERTS_TOPIC: alerts.feed_failures
    restart: unless-stopped
    networks:
      - news-net
    volumes:
      - ./kafka:/app/kafka

  qwen-server:
    build:
      context: .
      dockerfile: services/qwen_server/Dockerfile
    container_name: qwen-server
    depends_on:
      - postgres
    environment:
      QWEN_LOCAL_PATH: /models/qwen
      HF_TOKEN: ${HF_TOKEN:-}
      NVIDIA_VISIBLE_DEVICES: all
    volumes:
      - ${QWEN_MODEL_PATH:?Set QWEN_MODEL_PATH to the local Qwen model snapshot}:/models/qwen:ro
    ports:
      - "8000:8080"
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - news-net

volumes:
  postgres_data:
  spark-history:

networks:
  news-net:
    external: true
